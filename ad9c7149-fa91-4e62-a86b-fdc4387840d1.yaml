%YAML 1.2
---
# Follow strict YAML spec for the file layout and embed MD as needed where specified.  This permits use of standard spec tools without needing custom solutions.
# For consistency, use camelCase for key names and follow style conventions elsewhere.
# For readability, remove anything that is not actually needed.
  # NOTE:  This is the spec doc so everything is showing here

### Header
# This section contains the administrative minutiae needed to link, reference, etc and generally manage these documents. New keys may be created if/as needed but make sure they are tracked in the spec doc
 
id: "ad9c7149-fa91-4e62-a86b-fdc4387840d1" # [UUIDv4 generator](https://www.uuidgenerator.net/)
type: procedure # Options: "[regulation|policy|standard|requirement|control|procedure]"
title: "Documentation management"
shortDescription: "Specification for file format and management"
#referenceTag:
  # this section is used to link to other documents
  # Reserved keys:  'parent', 'peer', and 'child'
  # 0 - N tags/keys may be used and tags may have 0 - N values
  #- “ISO 27002:2005”: "5.1.1.a"
  #- "PCI"
  #- parent: 
  #  - "82345883-2ef9-4b6e-80dc-e09475285f29"
  #  - "917c271c-d0d4-4971-9f34-c4e2e7085fe0"
  #- peer: ! # `!` = null
  #- child: # or just comment out the whole line
revision:
  # The date field is to use ISO format.  Default should be `YYYYMMDD` but may include the time if necessary (but then dont forget TZ)
  - date: 20191029
    status: draft # Options: [draft|current|expire]
    name: "Stephen Hepner"
    reason: "Initial draft"

### Document
# "documentBody" contains the body of the document
# Use CommonMark (Markdown) here as needed
# See [Example 5.7. Block Scalar Indicators](https://yaml.org/spec/1.2/spec.html#id2772075) for '|' (literal) vs '>' (folded).  Sorry, cant use [anchors](https://yaml.org/spec/1.2/spec.html#id2785586) with these

documentBody: | # No more YAML comments after this point
  # Documentation management

  The purpose of this is to determine how the documentation will be managed.  Security Policy, Standards, Controls, Requirements, etc, etc, etc represent a huge body of text.  All of which needs to be managed, maintained, cross referenced, etc.

  This document is the template for how this will be performed using plain ASCII text files, structured using YAML, and formatted with Markdown.

  Ideally, all documentation would use this methodology at its core

  There are multiple advantages to this approach:
  No vendor lock-in:  In particular, everything is stored in a simple easy to understand human readable format which can be implemented with a number of cheap or free solutions.
  All documentation is data:  While that technically has always been the case, the use of YAML enforces that.
  Compiling documentation: Much like compiling code, this permits interacting with the documentation in interesting ways such as having a simple script which can pull out all of the relevant standards, provide references to *why* they are there (ie link back to the audit finding, regulatory control, etc) and output the whole thing in whatever format (PDF, spreadsheet, etc) the customer finds useful.

  ## Storage

  All files will be stored in a single github repo.  This will provide the needed revision history.  This also permits branch control.  Also, each file has a unique URL which will greatly aid in further unforseen possibilities.

  ## File naming
  
  Ideally, the name of the file would be the contents of the ID field.  As these are YAML spec files, the extension `.yaml` is to be used.  In the event the mechanism storing the files does not have revision control, the full filename would be `<ID>_<Revision Date>.yaml`.

  ## Publishing
  
  It should be noted that this naming scheme is absolutely unhelpful for the human who wants to do anything with the files.  To solve this problem, a table of contents is to be generated whenever there is a change to the body of information.

  When using a repository tool with the concept of branches, it would be possible to create an “official policy branch” or the like.  If this is not available, or if it proves too difficult, this would have to be controlled by YAML config files to handle these groupings.

  The YAML config files are also needed for the output to have a sensible order.  Without this, the resulting document will have all of the relevant data but randomly dispersed throughout with no logical order in that section.  This could be done by explicitly setting the order (ie File A first, File C second, File B third) but ideally, this order would be managed automatically by the information contained within the files themselves.

  ## File format
  
  This is how the files would be formatted.  Fields may be removed if not needed.

  Evaluation of the file starts with parsing the YAML followed by parsing the CommonMark (Markdown) within the values.

  See the [source]() of this file for the layout
  
  This is an example of how the files could be organized via a config file when it is not practical or desired to let the documents self-organize.

  ``` YAML
  %YAML 1.2
  ---
  document:
    title: "Access Control Standard"
    contents:
      # Think table of contents.  Note that
      # The contents, when listed, fix the order of the referenced documents.
      # Otherwise, they will just be added together randomly.
      - “ba270852-d31b-4abf-9984-2a8a2d22e12f”
      - “0cdb8583-8b88-47e3-af04-11c05f1ef7f5”
      - “94633263-bf0f-40a5-a88b-d5ec814b0ab7”
  ...
  %YAML 1.2
  ---
  document:
    title: "All the Security Policies and Standards"
    contents: # list the Policy documents before the Standard documents
      # this is also perfectly fine (provided the YAML is correct)
      type: Policy  #want fixed order output
        - “52d05e9f-2af9-4a5d-8d9f-0ba5e9158c30”
        - “f0201539-7594-4f71-894f-6b20ab7725b6”
        - “987b4050-f867-4624-ad1f-8cb32d6fb531”
        - “589ccbb2-b074-4773-909e-10be26aef46b”
      type: Standard  # dont care about the order of the output for this section
  ...
  ```

  ### References:
  * https://www.codeproject.com/Tips/5248463/Building-YAML-Flavored-Markdown-with-EPS-Extension
  * https://jmduke.com/2015/11/09/embedding-markdown-in-yaml
  * https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/
  * https://github.com/dotnet/csharplang/issues/878
  * https://pandoc.org/
  * https://stackoverflow.com/questions/21247978/compile-multiple-files-into-one-with-title-blocks
  * https://docs.getpelican.com/en/stable/content.html


  * https://codebeautify.org/yaml-validator
  * https://yaml-online-parser.appspot.com/

...
